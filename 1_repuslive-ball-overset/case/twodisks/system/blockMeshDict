/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2312                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scale   1;

xlength 8;
ylength 4;
zlength 0.2;

//- Cylinder Left
radius 0.2;
radiusOuter #eval{($radius*2.0)};
scalex 0.35;
scaley 0.35;
pi 3.1415926;
centerLx #eval{ (-$scalex*$xlength) };
centerLy #eval{ -$scaley*$ylength };
centerLz #eval{ -0.5*$zlength };

//- Cylinder Right
centerRx #eval{ ($scalex*$xlength) };
centerRy #eval{ -$scaley*$ylength };
centerRz #eval{ -0.5*$zlength };

//- box
regionxp #eval{ (0.5*$xlength) };
regionxn #eval{ (-0.5*$xlength) };
regionyp #eval{ (0.5*$ylength) };
regionyn #eval{ (-0.5*$ylength) };
regionzp #eval{ (0.5*$zlength) };
regionzn #eval{ (-0.5*$zlength) };

pAx $regionxn;
pAy $regionyn;
pAz $regionzn;

pBx $regionxp;
pBy $regionyn;
pBz $regionzn;

pCx $regionxp;
pCy $regionyp;
pCz $regionzn;

pDx $regionxn;
pDy $regionyp;
pDz $regionzn;

pApx $regionxn;
pApy $regionyn;
pApz $regionzp;

pBpx $regionxp;
pBpy $regionyn;
pBpz $regionzp;

pCpx $regionxp;
pCpy $regionyp;
pCpz $regionzp;

pDpx $regionxn;
pDpy $regionyp;
pDpz $regionzp;

// left disk

CLAx #eval{ ($radius*cos(0)+$centerLx) };
CLAy #eval{ ($radius*sin(0)+$centerLy) };
CLAz #eval{$centerLz};
 
CLBx #eval{$radius*cos(2.0*$pi/8.0)+$centerLx};
CLBy #eval{$radius*sin(2*$pi/8.0)+$centerLy};
CLBz #eval{$centerLz};

CLCx #eval{$radius*cos(2*2*$pi/8.0)+$centerLx};
CLCy #eval{$radius*sin(2*2*$pi/8.0)+$centerLy};
CLCz #eval{$centerLz};

CLDx #eval{$radius*cos(3*2*$pi/8.0)+$centerLx};
CLDy #eval{$radius*sin(3*2*$pi/8.0)+$centerLy};
CLDz #eval{$centerLz};

CLEx #eval{$radius*cos(4*2*$pi/8.0)+$centerLx};
CLEy #eval{$radius*sin(4*2*$pi/8.0)+$centerLy};
CLEz #eval{$centerLz};

CLFx #eval{$radius*cos(5*2*$pi/8.0)+$centerLx};
CLFy #eval{$radius*sin(5*2*$pi/8.0)+$centerLy};
CLFz #eval{$centerLz};

CLGx #eval{$radius*cos(6*2*$pi/8.0)+$centerLx};
CLGy #eval{$radius*sin(6*2*$pi/8.0)+$centerLy};
CLGz #eval{$centerLz};

CLHx #eval{$radius*cos(7*2*$pi/8.0)+$centerLx};
CLHy #eval{$radius*sin(7*2*$pi/8.0)+$centerLy};
CLHz #eval{$centerLz};

//- outer
oCLAx #eval{ ($radiusOuter*cos(0)+$centerLx) };
oCLAy #eval{ ($radiusOuter*sin(0)+$centerLy) };
oCLAz #eval{$centerLz};
 
oCLBx #eval{$radiusOuter*cos(2.0*$pi/8.0)+$centerLx};
oCLBy #eval{$radiusOuter*sin(2*$pi/8.0)+$centerLy};
oCLBz #eval{$centerLz};

oCLCx #eval{$radiusOuter*cos(2*2*$pi/8.0)+$centerLx};
oCLCy #eval{$radiusOuter*sin(2*2*$pi/8.0)+$centerLy};
oCLCz #eval{$centerLz};

oCLDx #eval{$radiusOuter*cos(3*2*$pi/8.0)+$centerLx};
oCLDy #eval{$radiusOuter*sin(3*2*$pi/8.0)+$centerLy};
oCLDz #eval{$centerLz};

oCLEx #eval{$radiusOuter*cos(4*2*$pi/8.0)+$centerLx};
oCLEy #eval{$radiusOuter*sin(4*2*$pi/8.0)+$centerLy};
oCLEz #eval{$centerLz};

oCLFx #eval{$radiusOuter*cos(5*2*$pi/8.0)+$centerLx};
oCLFy #eval{$radiusOuter*sin(5*2*$pi/8.0)+$centerLy};
oCLFz #eval{$centerLz};

oCLGx #eval{$radiusOuter*cos(6*2*$pi/8.0)+$centerLx};
oCLGy #eval{$radiusOuter*sin(6*2*$pi/8.0)+$centerLy};
oCLGz #eval{$centerLz};

oCLHx #eval{$radiusOuter*cos(7*2*$pi/8.0)+$centerLx};
oCLHy #eval{$radiusOuter*sin(7*2*$pi/8.0)+$centerLy};
oCLHz #eval{$centerLz};

//  right disk
CRAx #eval{ ($radius*cos(0)+$centerRx) };
CRAy #eval{ ($radius*sin(0)+$centerRy) };
CRAz #eval{$centerRz};
 
CRBx #eval{$radius*cos(2*$pi/8.0)+$centerRx};
CRBy #eval{$radius*sin(2*$pi/8.0)+$centerRy};
CRBz #eval{$centerRz};

CRCx #eval{$radius*cos(2*2*$pi/8.0)+$centerRx};
CRCy #eval{$radius*sin(2*2*$pi/8.0)+$centerRy};
CRCz #eval{$centerRz};

CRDx #eval{$radius*cos(3*2*$pi/8.0)+$centerRx};
CRDy #eval{$radius*sin(3*2*$pi/8.0)+$centerRy};
CRDz #eval{$centerRz};

CREx #eval{$radius*cos(4*2*$pi/8.0)+$centerRx};
CREy #eval{$radius*sin(4*2*$pi/8.0)+$centerRy};
CREz #eval{$centerRz};

CRFx #eval{$radius*cos(5*2*$pi/8.0)+$centerRx};
CRFy #eval{$radius*sin(5*2*$pi/8.0)+$centerRy};
CRFz #eval{$centerRz};

CRGx #eval{$radius*cos(6*2*$pi/8.0)+$centerRx};
CRGy #eval{$radius*sin(6*2*$pi/8.0)+$centerRy};
CRGz #eval{$centerRz};

CRHx #eval{$radius*cos(7*2*$pi/8.0)+$centerRx};
CRHy #eval{$radius*sin(7*2*$pi/8.0)+$centerRy};
CRHz #eval{$centerRz};

//- outer
oCRAx #eval{ ($radiusOuter*cos(0)+$centerRx) };
oCRAy #eval{ ($radiusOuter*sin(0)+$centerRy) };
oCRAz #eval{$centerRz};
 
oCRBx #eval{$radiusOuter*cos(2.0*$pi/8.0)+$centerRx};
oCRBy #eval{$radiusOuter*sin(2*$pi/8.0)+$centerRy};
oCRBz #eval{$centerRz};

oCRCx #eval{$radiusOuter*cos(2*2*$pi/8.0)+$centerRx};
oCRCy #eval{$radiusOuter*sin(2*2*$pi/8.0)+$centerRy};
oCRCz #eval{$centerRz};

oCRDx #eval{$radiusOuter*cos(3*2*$pi/8.0)+$centerRx};
oCRDy #eval{$radiusOuter*sin(3*2*$pi/8.0)+$centerRy};
oCRDz #eval{$centerRz};

oCREx #eval{$radiusOuter*cos(4*2*$pi/8.0)+$centerRx};
oCREy #eval{$radiusOuter*sin(4*2*$pi/8.0)+$centerRy};
oCREz #eval{$centerRz};

oCRFx #eval{$radiusOuter*cos(5*2*$pi/8.0)+$centerRx};
oCRFy #eval{$radiusOuter*sin(5*2*$pi/8.0)+$centerRy};
oCRFz #eval{$centerRz};

oCRGx #eval{$radiusOuter*cos(6*2*$pi/8.0)+$centerRx};
oCRGy #eval{$radiusOuter*sin(6*2*$pi/8.0)+$centerRy};
oCRGz #eval{$centerRz};

oCRHx #eval{$radiusOuter*cos(7*2*$pi/8.0)+$centerRx};
oCRHy #eval{$radiusOuter*sin(7*2*$pi/8.0)+$centerRy};
oCRHz #eval{$centerRz};

vertices
(
    name v0 ( $pAx  $pAy  $pAz ) // A
    name v1 ( $pBx  $pBy  $pBz ) // B
    name v2 ( $pCx  $pCy  $pCz ) // C
    name v3 ( $pDx  $pDy  $pDz ) // D
    name v4 ( $pApx  $pApy  $pApz ) // A'
    name v5 ( $pBpx  $pBpy  $pBpz ) // B'
    name v6 ( $pCpx  $pCpy  $pCpz ) // C'
    name v7 ( $pDpx  $pDpy  $pDpz ) // D'

    //- first disk on left
    name CLA ( $CLAx $CLAy $CLAz ) // CLA
    name CLB ( $CLBx $CLBy $CLBz ) // CLB
    name CLC ( $CLCx $CLCy $CLCz ) // CLC
    name CLD ( $CLDx $CLDy $CLDz ) // CLD
    name CLE ( $CLEx $CLEy $CLEz ) // CLE
    name CLF ( $CLFx $CLFy $CLFz ) // CLF
    name CLG ( $CLGx $CLGy $CLGz ) // CLG
    name CLH ( $CLHx $CLHy $CLHz ) // CLH
				   
    name CLAp ( $CLAx $CLAy -$CLAz ) // CLAp
    name CLBp ( $CLBx $CLBy -$CLBz ) // CLBp
    name CLCp ( $CLCx $CLCy -$CLCz ) // CLCp
    name CLDp ( $CLDx $CLDy -$CLDz ) // CLDp
    name CLEp ( $CLEx $CLEy -$CLEz ) // CLEp
    name CLFp ( $CLFx $CLFy -$CLFz ) // CLFp
    name CLGp ( $CLGx $CLGy -$CLGz ) // CLGp
    name CLHp ( $CLHx $CLHy -$CLHz ) // CLHp
				     
    name oCLA ( $oCLAx $oCLAy $oCLAz ) // oCLA
    name oCLB ( $oCLBx $oCLBy $oCLBz ) // oCLB
    name oCLC ( $oCLCx $oCLCy $oCLCz ) // oCLC
    name oCLD ( $oCLDx $oCLDy $oCLDz ) // oCLD
    name oCLE ( $oCLEx $oCLEy $oCLEz ) // oCLE
    name oCLF ( $oCLFx $oCLFy $oCLFz ) // oCLF
    name oCLG ( $oCLGx $oCLGy $oCLGz ) // oCLG
    name oCLH ( $oCLHx $oCLHy $oCLHz ) // oCLH
				   
    name oCLAp ( $oCLAx $oCLAy -$oCLAz ) // oCLAp
    name oCLBp ( $oCLBx $oCLBy -$oCLBz ) // oCLBp
    name oCLCp ( $oCLCx $oCLCy -$oCLCz ) // oCLCp
    name oCLDp ( $oCLDx $oCLDy -$oCLDz ) // oCLDp
    name oCLEp ( $oCLEx $oCLEy -$oCLEz ) // oCLEp
    name oCLFp ( $oCLFx $oCLFy -$oCLFz ) // oCLFp
    name oCLGp ( $oCLGx $oCLGy -$oCLGz ) // oCLGp
    name oCLHp ( $oCLHx $oCLHy -$oCLHz ) // oCLHp
				     
    //- second disk on right
    name CRA ( $CRAx $CRAy $CRAz ) // CRA
    name CRB ( $CRBx $CRBy $CRBz ) // CRB
    name CRC ( $CRCx $CRCy $CRCz ) // CRC
    name CRD ( $CRDx $CRDy $CRDz ) // CRD
    name CRE ( $CREx $CREy $CREz ) // CRE
    name CRF ( $CRFx $CRFy $CRFz ) // CRF
    name CRG ( $CRGx $CRGy $CRGz ) // CRG
    name CRH ( $CRHx $CRHy $CRHz ) // CRH
				   
    name CRAp ( $CRAx $CRAy -$CRAz ) // CRAp
    name CRBp ( $CRBx $CRBy -$CRBz ) // CRBp
    name CRCp ( $CRCx $CRCy -$CRCz ) // CRCp
    name CRDp ( $CRDx $CRDy -$CRDz ) // CRDp
    name CREp ( $CREx $CREy -$CREz ) // CREp
    name CRFp ( $CRFx $CRFy -$CRFz ) // CRFp
    name CRGp ( $CRGx $CRGy -$CRGz ) // CRGp
    name CRHp ( $CRHx $CRHy -$CRHz ) // CRHp
				     
    name oCRA ( $oCRAx $oCRAy $oCRAz ) // oCRA
    name oCRB ( $oCRBx $oCRBy $oCRBz ) // oCRB
    name oCRC ( $oCRCx $oCRCy $oCRCz ) // oCRC
    name oCRD ( $oCRDx $oCRDy $oCRDz ) // oCRD
    name oCRE ( $oCREx $oCREy $oCREz ) // oCRE
    name oCRF ( $oCRFx $oCRFy $oCRFz ) // oCRF
    name oCRG ( $oCRGx $oCRGy $oCRGz ) // oCRG
    name oCRH ( $oCRHx $oCRHy $oCRHz ) // oCRH
				   
    name oCRAp ( $oCRAx $oCRAy -$oCRAz ) // oCRAp
    name oCRBp ( $oCRBx $oCRBy -$oCRBz ) // oCRBp
    name oCRCp ( $oCRCx $oCRCy -$oCRCz ) // oCRCp
    name oCRDp ( $oCRDx $oCRDy -$oCRDz ) // oCRDp
    name oCREp ( $oCREx $oCREy -$oCREz ) // oCREp
    name oCRFp ( $oCRFx $oCRFy -$oCRFz ) // oCRFp
    name oCRGp ( $oCRGx $oCRGy -$oCRGz ) // oCRGp
    name oCRHp ( $oCRHx $oCRHy -$oCRHz ) // oCRHp
);

blocks
(
    name box hex (v0 v1 v2 v3 v4 v5 v6 v7) (140 70 1) simpleGrading (1 1 1)
    //name ocl hex (oCLA oCLC oCLE oCLG oCLAp oCLCp oCLEp oCLGp) movingZone1 (80 80 1) simpleGrading (1 1 1)
    name icl hex (CLA CLC CLE CLG CLAp CLCp CLEp CLGp) movingZone1 (20 20 1) simpleGrading (1 1 1)
    name icl_b1 hex (CLA oCLA oCLC CLC CLAp oCLAp oCLCp CLCp) movingZone1 (20 20 1) simpleGrading (1 1 1)
    name icl_b2 hex (CLC oCLC oCLE CLE CLCp oCLCp oCLEp CLEp) movingZone1 (20 20 1) simpleGrading (1 1 1)
    name icl_b3 hex (CLE oCLE oCLG CLG CLEp oCLEp oCLGp CLGp) movingZone1 (20 20 1) simpleGrading (1 1 1)
    name icl_b3 hex (CLG oCLG oCLA CLA CLGp oCLGp oCLAp CLAp) movingZone1 (20 20 1) simpleGrading (1 1 1)

    name icr hex (CRA CRC CRE CRG CRAp CRCp CREp CRGp) movingZone2 (20 20 1) simpleGrading (1 1 1)
    name icr_b1 hex (CRA oCRA oCRC CRC CRAp oCRAp oCRCp CRCp) movingZone2 (20 20 1) simpleGrading (1 1 1)
    name icr_b2 hex (CRC oCRC oCRE CRE CRCp oCRCp oCREp CREp) movingZone2 (20 20 1) simpleGrading (1 1 1)
    name icr_b3 hex (CRE oCRE oCRG CRG CREp oCREp oCRGp CRGp) movingZone2 (20 20 1) simpleGrading (1 1 1)
    name icr_b3 hex (CRG oCRG oCRA CRA CRGp oCRGp oCRAp CRAp) movingZone2 (20 20 1) simpleGrading (1 1 1)
);

edges
(
 //- left cylinder
    arc CLA CLC ($CLBx $CLBy $CLBz)
    arc CLC CLE ($CLDx $CLDy $CLDz)
    arc CLE CLG ($CLFx $CLFy $CLFz)
    arc CLG CLA ($CLHx $CLHy $CLHz)

    arc CLAp CLCp ($CLBx $CLBy -$CLBz)
    arc CLCp CLEp ($CLDx $CLDy -$CLDz)
    arc CLEp CLGp ($CLFx $CLFy -$CLFz)
    arc CLGp CLAp ($CLHx $CLHy -$CLHz)

    arc oCLA oCLC ($oCLBx $oCLBy $oCLBz)
    arc oCLC oCLE ($oCLDx $oCLDy $oCLDz)
    arc oCLE oCLG ($oCLFx $oCLFy $oCLFz)
    arc oCLG oCLA ($oCLHx $oCLHy $oCLHz)

    arc oCLAp oCLCp ($oCLBx $oCLBy -$oCLBz)
    arc oCLCp oCLEp ($oCLDx $oCLDy -$oCLDz)
    arc oCLEp oCLGp ($oCLFx $oCLFy -$oCLFz)
    arc oCLGp oCLAp ($oCLHx $oCLHy -$oCLHz)

 //- right cylinder
    arc CRA CRC ($CRBx $CRBy $CRBz)
    arc CRC CRE ($CRDx $CRDy $CRDz)
    arc CRE CRG ($CRFx $CRFy $CRFz)
    arc CRG CRA ($CRHx $CRHy $CRHz)

    arc CRAp CRCp ($CRBx $CRBy -$CRBz)
    arc CRCp CREp ($CRDx $CRDy -$CRDz)
    arc CREp CRGp ($CRFx $CRFy -$CRFz)
    arc CRGp CRAp ($CRHx $CRHy -$CRHz)

    arc oCRA oCRC ($oCRBx $oCRBy $oCRBz)
    arc oCRC oCRE ($oCRDx $oCRDy $oCRDz)
    arc oCRE oCRG ($oCRFx $oCRFy $oCRFz)
    arc oCRG oCRA ($oCRHx $oCRHy $oCRHz)

    arc oCRAp oCRCp ($oCRBx $oCRBy -$oCRBz)
    arc oCRCp oCREp ($oCRDx $oCRDy -$oCRDz)
    arc oCREp oCRGp ($oCRFx $oCRFy -$oCRFz)
    arc oCRGp oCRAp ($oCRHx $oCRHy -$oCRHz)
);

boundary
(
    overset1
    {
        type        overset;
        faces
        (
            ( oCLA oCLC oCLCp oCLAp )
            ( oCLC oCLE oCLEp oCLCp )
            ( oCLE oCLG oCLGp oCLEp )
            ( oCLG oCLA oCLAp oCLGp )
        );
    }

    overset2
    {
        type        overset;
        faces
        (
            ( oCRA oCRC oCRCp oCRAp )
            ( oCRC oCRE oCREp oCRCp )
            ( oCRE oCRG oCRGp oCREp )
            ( oCRG oCRA oCRAp oCRGp )
        );
    }

    walls
    {
        type wall;
        faces
        (
            (v3 v7 v6 v2)
            (v1 v5 v4 v0)
        );
    }

    inlet
    {
        type wall;
        faces
        (
            (v0 v4 v7 v3)
        );
    }

    outlet
    {
        type wall;
        faces
        (
            (v2 v6 v5 v1)
        );
    }

    // Populated by subsetMesh
    hole
    {
        type wall;
        faces ();
    }

    // Populated by subsetMesh
    hole1
    {
        type wall;
        faces ();
    }

    frontAndBack
    {
        type empty;
        faces
        (
            (v0 v3 v2 v1)
            (v4 v5 v6 v7)
        );
    }

    frontAndBack1
    {
        type empty;
        faces
        (
	 //- inner disk
            (CLA CLG CLE CLC)
            (CLAp CLCp CLEp CLGp)

	 //- block1
            (CLA CLC oCLC oCLA)
            (CLAp oCLAp oCLCp CLCp)

	 //- block2
            (CLC CLE oCLE oCLC)
            (CLCp oCLCp oCLEp CLEp)

	 //- block3
            (CLE CLG oCLG oCLE)
            (CLEp oCLEp oCLGp CLGp)

	 //- block4
            (CLG CLA oCLA oCLG)
            (CLGp oCLGp oCLAp CLAp)
        );
    }

    frontAndBack2
    {
        type empty;
        faces
        (
	 //- inner disk
            (CRA CRG CRE CRC)
            (CRAp CRCp CREp CRGp)

	 //- block1
            (CRA CRC oCRC oCRA)
            (CRAp oCRAp oCRCp CRCp)

	 //- block2
            (CRC CRE oCRE oCRC)
            (CRCp oCRCp oCREp CREp)

	 //- block3
            (CRE CRG oCRG oCRE)
            (CREp oCREp oCRGp CRGp)

	 //- block4
            (CRG CRA oCRA oCRG)
            (CRGp oCRGp oCRAp CRAp)
        );
    }

);


// ************************************************************************* //
